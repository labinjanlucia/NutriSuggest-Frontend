# Frontend Dockerfile for NutriSuggest Vue.js Application - PRODUCTION
# Multi-stage build for optimized production image

# Stage 1: Build the application
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Copy production environment file
COPY .env.production .env

# Build arguments for environment variables (Northflank backend URL)
ARG VITE_API_URL=https://p01--nutri-suggest-backend--lgfhgjf5jfmq.code.run/api
ARG VITE_RECOMMENDATION_API_URL=https://p01--nutri-suggest-backend--lgfhgjf5jfmq.code.run/api

# Set environment variables for build
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_RECOMMENDATION_API_URL=$VITE_RECOMMENDATION_API_URL

# Build the application for production
RUN npm run build

# Stage 2: Production server with Nginx
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Remove default nginx static assets
RUN rm -rf /usr/share/nginx/html/*

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy production nginx configuration (without backend proxy)
COPY nginx.production.conf /etc/nginx/conf.d/default.conf

# Create non-root user for security
RUN adduser -S frontend -u 1001 -G nginx

# Set proper permissions
RUN chown -R frontend:nginx /usr/share/nginx/html && \
    chown -R frontend:nginx /var/cache/nginx && \
    chown -R frontend:nginx /var/log/nginx && \
    chown -R frontend:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R frontend:nginx /var/run/nginx.pid

# Switch to non-root user
USER frontend

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]